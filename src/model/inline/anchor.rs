/*!
One-line description.

More detailed description, with

# Example

*/

use crate::error;
use crate::model::inline::{HyperLink, InlineContent};
use std::fmt::{Display, Formatter};

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

#[derive(Clone, Debug, PartialEq)]
pub struct Anchor(String);

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

impl Display for Anchor {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.0)
    }
}

inline_impls!(Anchor);

impl Anchor {
    pub fn new(id: &str) -> error::Result<Self> {
        if id.is_empty() {
            Err(error::ErrorKind::MustNotBeEmpty.into())
        } else {
            Ok(Self(id.to_string()))
        }
    }

    pub fn to_ref(&self) -> HyperLink {
        HyperLink::internal(self.clone())
    }
}

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------
