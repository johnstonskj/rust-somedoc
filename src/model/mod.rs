/*!
One-line description.

More detailed description, with

# Example

*/

use crate::error;

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

pub trait ComplexContent<T> {
    fn has_inner(&self) -> bool {
        !self.inner().is_empty()
    }

    fn inner(&self) -> &Vec<T>;

    fn inner_mut(&mut self) -> &mut Vec<T>;

    fn add_content(&mut self, content: T) -> error::Result<()>;
}

pub trait Style: Default {}

pub trait Styled<T: Style> {
    fn has_styles(&self) -> bool {
        self.styles().is_empty()
    }

    fn styles(&self) -> &Vec<T>;

    fn styles_mut(&mut self) -> &mut Vec<T>;

    fn add_style(&mut self, style: T) -> error::Result<()>;
}

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------

pub mod document;
pub use document::{Document, DocumentMetadataKind, Metadata};

pub mod inline;

pub mod block;

pub mod visitor;
